#+TITLE: Setup programming
#+DESCRIPTION: Setup prog-mode, which is the major mode all programming major modes extend from, and other stuff that has to do with programming
#+AUTHOR: Maximilian Kuschewski
#+PROPERTY: my-file-type emacs-config-package

* Autocomplete
Don't to autocomplete for now - it slows down writing quite a bit
#+begin_src emacs-lisp
;; (add-hook 'prog-mode-hook 'auto-complete-mode)
#+end_src
* :use-package flycheck
** :defer t
* :use-package rainbow-delimiters
** :defer t
** :init
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
#+end_src
*** :use-package rainbow-identifiers

* :use-package quickrun
Quickrun can 'run' any (most) buffers - useful for developing bigger chunks of
code in a buffer, which quickrun turns into a kinda-repl
** :defer t
** :init
Bind a key to 'quickrun' the current buffer
#+begin_src emacs-lisp
(config/provide-feature :buffer "r" 'quickrun)
#+end_src
** :config
Don't timeout after 10 seconds if the program has not finished executing yet
#+begin_src emacs-lisp
(setq quickrun-timeout-seconds 120)
#+end_src
** :bind
Use cmd-r to run it
#+begin_src emacs-lisp
("s-r" . quickrun)
#+end_src
* :use-package company
Autocompletion / Suggestions with support for various backends
** :defer t
** :init
Add a hook to any programming-language-mode for company
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'company-mode)

;; aligns annotation to the right hand side
(setq company-tooltip-align-annotations t)

(setq company-idle-delay 0.2)
#+end_src
** :config
*** :use-package company-quickhelp
Show documentation for given function in a company-style popup
**** :init
#+begin_src emacs-lisp
;; (company-quickhelp-mode 1)
#+end_src
**** :config
#+begin_src emacs-lisp
;; (define-key company-active-map (kbd "M-S-h") #'company-quickhelp-manual-begin)
#+end_src
* :use-package outshine
** :defer t
** :init
#+begin_src emacs-lisp
(setq outshine-use-speed-commands t)
(add-hook 'outline-minor-mode-hook 'outshine-hook-function)
#+end_src

* Languages
** :use-package swift-mode
*** :defer t
** :use-package arduino-mode
** :use-package company-arduino
** :use-package kotlin-mode
*** :defer t
*** :mode
#+begin_src emacs-lisp
("\\.kt\\'" . kotlin-mode)
#+end_src
** :use-package rustic
*** :defer t
*** :mode
#+begin_src emacs-lisp
("\\.rs\\'" . rust-mode)
#+end_src
*** :init
#+begin_src emacs-lisp
(add-hook  bv
#+end_src
**** :use-package racer
***** :defer t
***** :init
#+begin_src emacs-lisp
(add-hook 'rust-mode-hook #'racer-mode)
(add-hook 'racer-mode-hook #'eldoc-mode)
#+end_src
***** :hook
#+begin_src emacs-lisp
(rustic-mode)
#+end_src
**** :use-package lsp-mode
***** :defer t
*** :config
**** Activate important modes
#+begin_src emacs-lisp
(racer-mode +1)
(eldoc-mode +1)
(flycheck-mode +1)
#+end_src
**** Set up local keys
#+begin_src emacs-lisp
(config/local-keys 'rustic-mode
  "d" 'lsp-find-definition
  "f" 'rustic-format-buffer
  "?" 'lsp-describe-thing-at-point)
#+end_src
* Setups for single modes
Require the mode-specific setup files that configure programming-modes:
#+begin_src emacs-lisp
  (require-all
   '(setup-c
     setup-elixir
     setup-go
     setup-lisp
     setup-markdown
     setup-haskell
     setup-statistics
     setup-web
     ))
#+end_src
* Provide it
#+begin_src emacs-lisp
(provide 'setup-programming)
#+end_src
