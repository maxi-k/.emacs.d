#+TITLE: Bootstrap
#+DESCRIPTION: Setup up some stuff that can be used in every setup-file
#+AUTHOR: Maximilian Kuschewski
#+PROPERTY: my-file-type emacs-config

* Hydra
[[https://github.com/abo-abo/hydra][Hydra]] is awesome!
#+begin_src emacs-lisp
  (use-package hydra
    :init
    (put 'config/hydra 'lisp-indent-function 'defun))
  (defmacro config/hydra (&rest args)
    `(defhydra ,@args))
#+end_src

* Leader Keys
A good idea copied from spacemacs: There is a global leader key and a
mode-local leader key.

[[https://github.com/justbur/emacs-bind-map][emacs-bind-map]] is a package that generalizes the concept of leaders. It is what
makes this possible/easy:
#+begin_src emacs-lisp
(use-package bind-map :defer t)
#+end_src

Set up bindings for the global and local leaders:
#+begin_src emacs-lisp
(defvar config/global-leader-key "SPC")
(defvar config/local-leader-key ",")
#+end_src
Note that comma is normally used by evil-mode, but rarely used.

** Util
First, set up a parsing function that allows for nesting bindings:
#+begin_src emacs-lisp
(defun config|parse-bindings (bindings &optional prefix)
  "Parses a list of keybindings as used by the leader functions
  '(\"a\" a-binding
    \"b\" (\"description\"
               \"c\" c-binding
               \"d\" d-binding))
  and flattens it to something immediately useable:
  '(\"a\"  a-binding
    \"bc\" c-binding
    \"bd\" d-binding)"
  (let ((keys '())
        (descriptions '()))
    (while bindings
      (let ((binding (concat prefix (pop bindings)))
            (fn/list (pop bindings)))
        (if (and (listp fn/list) (not (functionp fn/list)))
            (let* ((desc (pop fn/list))
                   (subbinds (config|parse-bindings fn/list binding))
                   (subkeys (car subbinds))
                   (subdescs (cdr subbinds)))
              (setq keys (append keys subkeys))
              (push (cons binding desc) descriptions)
              (setq descriptions (append descriptions subdescs)))
          (progn
            (when (and (functionp fn/list)
                       (not (symbolp fn/list)))
              ;; fn/list is a lambda. Use its Docstring as description
              (push (cons binding (or (documentation fn/list) "lambda"))
                    descriptions))
            (push fn/list keys)
            (push binding keys)))))
    (cons keys descriptions)))
#+end_src

When using [[./setup-which-key.org][which-key]], it's nice to have descriptions of what the 'submaps' do.
Add a few helper functions for making that easier:
#+begin_src emacs-lisp
(defun config/key-description (modes key name &rest rest)
  (if modes
      (mapc (lambda (m) (apply 'which-key-add-major-mode-key-based-replacements
                          m key name rest))
            modes)
    (apply 'which-key-add-key-based-replacements key name rest)))

(defun config/global-key-desc (key desc)
  (config/key-description nil
    (concat config/global-leader-key " " key)
                          desc))
#+end_src

Then, set up a helper function for binding all keys to a given map
#+begin_src emacs-lisp
(defun config|bind-all-keys (leader map bindings &optional modes)
  "Takes a keymap and a (possibly nested) list of bindings
and binds them all to the keymap."
  (let* ((binds (config|parse-bindings bindings))
         (keys (car binds))
         (descriptions (cdr binds))
         (key (pop keys))
         (fn (pop keys)))
         (while key
           (define-key map (kbd key) fn)
           (setq key (pop keys)
                 fn (pop keys)))
         (mapc (lambda (x) (config/key-description modes
                          (concat leader " " (car x))
                          (cdr x)))
               descriptions)))
#+end_src

Create a cache variable for stuff to be bound after init. This is done because
bind-map requires =evil= when it discovers the =:evil-keys= parameter, and I
don't want it to until after init.
#+begin_src emacs-lisp
(defvar config|after-init-key-cache '())
(add-hook
 'emacs-startup-hook
 (lambda ()
   (mapc
    (lambda (entry)
      (if (assoc :local entry)
          (config|local-keys (cdr (assoc :mode entry)) (cdr (assoc :bindings entry)))
        (config|global-keys (cdr (assoc :bindings entry)))))
    ;; Reverse the cache so the keys get loaded in the right order (first in first out)
    (reverse config|after-init-key-cache))
   (setq config|after-init-key-cache nil)
   ))
#+end_src

** The Global Leader
Set up a function to bind keys to the global leader key
#+begin_src emacs-lisp
(defun config|global-keys (bindings)
     (unless (boundp 'config/global-leader-map)
       (eval
        `(bind-map config/global-leader-map
           ;; :keys ("M-m")
           :evil-keys (,config/global-leader-key)
           :evil-states (normal motion visual))))
     (config|bind-all-keys config/global-leader-key
                           config/global-leader-map
                           bindings))

(defun config/global-keys (key fn &rest bindings)
  (if after-init-time
      (config|global-keys (cons key (cons fn bindings)))
    (push (list (cons :bindings (cons key (cons fn bindings))))
          config|after-init-key-cache)))
(put 'config/global-keys 'lisp-indent-function 'defun)
#+end_src

*** Define some keys
Set a few bindings following the prefix
#+begin_src emacs-lisp
(config/global-keys
  ;; Meta x
  "x" 'execute-extended-command
  "b" 'switch-to-buffer
  "g" 'keyboard-quit
  "u" 'universal-argument
  "z" (config/hydra hydra/zoom (:color red)
        "zoom"
        ("i" text-scale-increase "in")
        ("o" text-scale-decrease "out")
        ("q" nil "quit"))
  ;; Help
  "h" 'help)
#+end_src
*** Descriptions
When making nested keymaps like the ones =config|parse-keymap= uses, a
description can be added for submaps. This could be done simply with
=config/global-key-desc=, but [[Features]] provides a more concise way.
*** Features
Because different packages may provide similar types of features, it would be
nice to have a 'config api' that allows them to easily register features with
keybindings to the appropriate catagory, to be used from the global leader key.

#+begin_src emacs-lisp
(defvar config/global-feature-map '())
#+end_src

#+begin_src emacs-lisp
  (defun config/declare-feature-space (bind description keyword &rest prefixes)
    (let ((binding bind))
      (while prefixes
        (let* ((prfx (pop prefixes))
               (key (if (keywordp prfx)
                        (cdr (assoc prfx config/global-feature-map))
                      prfx)))
          (setq binding (concat key binding))))
      (add-to-list 'config/global-feature-map (cons keyword binding))
      (config/global-key-desc binding description)))

  (defun config/provide-feature (keyword key fn &rest binds)
    (let ((prefix (cdr (assoc keyword config/global-feature-map))))
      (while key
        (config/global-keys (concat prefix key) fn)
        (setq key (pop binds)
              fn (pop binds)))))
(put 'config/provide-feature 'lisp-indent-function 'defun)

#+end_src

Now, lets declare some features:
#+begin_src emacs-lisp
(config/declare-feature-space "a" "Apps" :app)
(config/declare-feature-space "s" "Search" :search)
#+end_src

An example for the providing of features can be found in the [[./setup-helm.org][Helm Setup]].

** Local leaders
Now For the mode-local leader-keys:
Set up a function to bind keys to one or more local modes

#+begin_src emacs-lisp
(defun config|local-keys (mode bindings)
      (let* ((modesp (listp mode))
             (modes (if modesp mode (cons mode nil)))
             (map (intern (format "config|local-leader-map|%s"
                                  (if modesp
                                      (apply 'concat (mapcar 'symbol-name mode))
                                    (symbol-name mode))))))
        (unless (boundp map)
          (eval
           `(bind-map ,map
              :evil-keys (,config/local-leader-key)
              :evil-states (normal motion visual)
              :major-modes ,modes)))
        (config|bind-all-keys config/local-leader-key
                              (symbol-value map)
                              bindings
                              modes)))

(defun config/local-keys (mode key fn &rest bindings)
  (if after-init-time
      (config|local-keys mode (cons key (cons fn bindings)))
    (push (list (cons :local t) (cons :mode mode) (cons :bindings (cons key (cons fn bindings))))
          config|after-init-key-cache)))

(put 'config/local-keys 'lisp-indent-function 'defun)

#+end_src
* Provide it
#+begin_src emacs-lisp
(provide 'bootstrap)
#+end_src
