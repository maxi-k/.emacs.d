#+TITLE: Setup buffers
#+DESCRIPTION: Setup buffer movement, killing, initial-buffers etc
#+AUTHOR: Maximilian Kuschewski
#+PROPERTY: my-file-type emacs-config

* Initial Buffers
Set the initial buffer choice to the remember-notes buffer, which is persisted
throughout sessions. Also set its mode to org-mode: The lisp-evaluation keys
work globally, so it's better than lisp-interaction-mode
#+begin_src emacs-lisp
  (setq initial-buffer-choice 'remember-notes
        remember-notes-initial-major-mode 'org-mode)
#+end_src

Fix C-c C-c being bound to bury-buffer instead of org-mode stuff
#+begin_src emacs-lisp
(add-hook 'remember-notes-mode-hook (lambda () (org-mode)))
#+end_src
* Packages
** :use-package golden-ratio
Golden Ration always keeps the current window at a nice size to work
in, while keeping the content of other windows readable.
*** :init
#+begin_src emacs-lisp
(golden-ratio-mode 1)
#+end_src
* Killing
Kill the current buffer
#+begin_src emacs-lisp
(global-set-key (kbd "s-k") 'kill-this-buffer)
(config/provide-feature :buffer
  "k" 'kill-this-buffer
  "K" 'kill-buffer)
#+end_src

* Movement
Open the buffer menu, not the buffer list, and define a key to open the selected
buffer in the buffer-menu window
#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-b") 'buffer-menu)
(define-key Buffer-menu-mode-map (kbd "a") 'Buffer-menu-this-window)
#+end_src

Quickly switch to the most recent buffer with cmd-v
#+begin_src emacs-lisp
(fset 'quick-switch-buffer [?\C-x ?b return])
(global-set-key (kbd "s-v") 'quick-switch-buffer)
#+end_src

Switch to another file and show it in another window
#+begin_src emacs-lisp
(global-set-key (kbd "C-x M-f") 'ido-find-file-other-window)
#+end_src

Move to the buffer in 'direction' with shift + arrow-key
#+begin_src emacs-lisp
(windmove-default-keybindings)
#+end_src

Switch windows more easily
(C-x o goes to the next window)
#+begin_src emacs-lisp
(global-set-key (kbd "M-o") 'other-window)
(global-set-key (kbd "C-x O") (lambda () (interactive) (other-window -1))) ;; back one
(global-set-key (kbd "C-x C-o") (lambda () (interactive) (other-window 2))) ;; forward two
#+end_src

* Manipulate
Bury and revert buffers more easily
#+begin_src emacs-lisp
(global-set-key (kbd "C-c y") 'bury-buffer)
(global-set-key (kbd "C-c r") 'revert-buffer)
#+end_src

Toggle horizontal and vertical window split
#+begin_src emacs-lisp
(global-set-key (kbd "M-O") 'toggle-window-split)
#+end_src

Enlarge/shrink windows
#+begin_src emacs-lisp
(global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "S-C-<down>") 'shrink-window)
(global-set-key (kbd "S-C-<up>") 'enlarge-window)
#+end_src

Make a vertical split and set the current window to 80 characters width:
#+begin_src emacs-lisp
(defun set-window-width (n)
  "Set the selected window's width."
  (adjust-window-trailing-edge (selected-window) (- n (window-width)) t))

(global-set-key (kbd "s-3")
                (lambda ()
                  (interactive)
                  (split-window-right)
                  (set-window-width 80)))
(global-set-key (kbd "s-8")
                (lambda ()
                  (interactive)
                  (set-window-width 80)))
#+end_src

#+begin_src emacs-lisp
(config/global-keys
  "w" (config/hydra hydra/window (:hint nil)
"
^Movement^      ^Split^       ^Resize^                       ^Buffer
-------------------------------------------------------------------------
_h_: left       _d_: right    _H_: shrink horizontal   _b_: buffer
_j_: bottom     _s_: below    _J_: enlarge vertical
_k_: top        _O_: toggle   _K_: shrink vertical
_l_: right      _a_: delete   _L_: enlarge horizontal
_o_: other      _g_: g-ratio  _G_: golden-ratio-mode
"
        ("b" switch-to-buffer)
        ("o" other-window)
        ("O" toggle-window-split)
        ("d" split-window-right)
        ("s" split-window-below)
        ("a" delete-window)
        ("h" evil-window-left)
        ("j" evil-window-down)
        ("k" evil-window-up)
        ("l" evil-window-right)
        ("H" shrink-window-horizontally)
        ("J" enlarge-window)
        ("K" shrink-window)
        ("L" enlarge-window-horizontally)
        ("g" golden-ratio :color blue)
        ("G" golden-ratio-mode :color blue)
        ("q" nil "quit" :color blue)))
#+end_src
* Provide it
#+begin_src emacs-lisp
(provide 'setup-buffers-windows)
#+end_src
