#+TITLE: Configure evil mode
#+AUTHOR: Maximilian Kuschewski
#+DESCRIPTION: Set up evil-mode, the extensible vi layer
#+PROPERTY: my-file-type emacs-config-package

* Utility
Set up some useful variables regarding evil-mode
#+begin_src emacs-lisp
(defvar my/evil-states '(normal insert visual operator replace motion emacs))
#+end_src

#+begin_src emacs-lisp
(defun evil-p ()
  "Returns non-nil if evil-mode is installed."
  (interactive)
  (boundp 'evil-mode))
#+end_src
* :use-package evil
** :defer t
** :bind
Activate Evil mode globally with s-escape
#+begin_src emacs-lisp
("s-<escape>" . evil-mode)
#+end_src
** :config
*** Initial States
When evil mode is activated, it should start in this state:
#+begin_src emacs-lisp
(setq evil-default-state 'normal)
#+end_src

However, in some cases, other initial states are better:
#+begin_src emacs-lisp
  (mapc (lambda (map)
          (evil-set-initial-state (car map) (cdr map)))
        '((eshell-mode . emacs)
          (undo-tree-visualizer-mode . emacs)
          (dired-mode . emacs)))
#+end_src
*** Plugins
**** :use-package evil-nerd-commenter
***** :init
#+begin_src emacs-lisp
(config/global-keys
  "c" '("Evil Nerd Commenter"
        "i" evilnc-comment-or-uncomment-lines
        "l" evilnc-quick-comment-or-uncomment-to-the-line
        "c" evilnc-copy-and-comment-lines
        "p" evilnc-comment-or-uncomment-paragraphs
        "r" comment-or-uncomment-region
        "v" evilnc-toggle-invert-comment-line-by-line
        "o" evilnc-comment-operator))
#+end_src
**** :use-package evil-surround
***** :config
Use evil-surround globally
Usage: (cs'" => 'text' -> "text")
#+begin_src emacs-lisp
(global-evil-surround-mode t)
#+end_src
**** :use-package evil-visualstar
***** :config
Use '*' to make a visual search for the word (thing at point) you are currently
on, then use n/N to go forward/backward like normal.
#+begin_src emacs-lisp
(global-evil-visualstar-mode t)
#+end_src
**** Evil paredit?
I don't think I like this - not using it for now.
It gives an error whenever an evil command would result in unmatched parens,
instead of just keeping the tree validity like paredit.
***** init
#+begin_src emacs-lisp
;; (autoload 'evil-paredit-mode "evil-paredit" nil t)
 ;; (add-hook 'lisp-mode-hook 'evil-paredit-mode)
#+end_src

*** Standard Keys
I want to be able to create new lines in normal-mode:
#+begin_src emacs-lisp
;; Insert new line (like o or O with prefix) without
;; going to insert mode
(define-key evil-normal-state-map (kbd "S-<return>")
  (lambda (arg) (interactive "P")
    (when arg (forward-line -1))
    (move-end-of-line nil)
    (insert "\n")))
(define-key evil-normal-state-map (kbd "<return>") #'newline)
#+end_src

Swap the ~:~ and ~;~ keys in normal and visual state:
#+begin_src emacs-lisp
;;(define-key evil-normal-state-map ":" #'evil-repeat-find-char)
;;(define-key evil-normal-state-map ";" #'evil-ex)
;;(define-key evil-visual-state-map ":" #'evil-repeat-find-char)
;;(define-key evil-visual-state-map ";" #'evil-ex)
#+end_src


Go to emacs-state *from normal-state*
#+begin_src emacs-lisp
;; Go to emacs state with \
(define-key evil-normal-state-map (kbd "\\") #'evil-emacs-state)
#+end_src

Go to normal-state *from emacs-state*
#+begin_src emacs-lisp
(define-key evil-emacs-state-map (kbd "M-n") #'evil-normal-state)
(define-key evil-emacs-state-map [escape] #'evil-normal-state)
#+end_src


Go to emacs/normal/god-state *from insert-state*
#+begin_src emacs-lisp
(define-key evil-insert-state-map (kbd "M-n") #'evil-normal-state)
(define-key evil-insert-state-map (kbd "s-\\") #'evil-emacs-state)
(define-key evil-insert-state-map (kbd "C-;") #'evil-execute-in-normal-state)
#+end_src

*** Looks
**** Face Defaults
Define some face colors to be used in the powerline and cursor colors:
#+begin_src emacs-lisp
  ;; faces :: evil-state -> (background, foreground)
  (let ((faces '((normal   . ("#9BEA00" . "#006600"))
                 (insert   . ("#0088B2" . "#70E1FF"))
                 (visual   . ("#FF7C00" . "#920000"))
                 (operator . ("#00FFFF" . "#000000"))
                 (replace  . ("violet"  . "purple" ))
                 (motion   . ("#FF00FF" . "#000000"))
                 (emacs    . ("red"     . "black"))
  )))
    (mapc (lambda (arg)
            (let ((state (symbol-name (car arg)))
                  (background (cadr arg))
                  (foreground (cddr arg)))
              (custom-declare-face
               (intern (format "my/evil-%s-face" state))
               `((t (:background ,background :foreground ,foreground)))
               (format "Face for the evil %s state" state)
               :group 'my/evil)))
          faces))
#+end_src
**** Set up the look
   A small utility function for getting the right face for the current evil state:
   #+begin_src emacs-lisp
(defun my/cur-evil-face ()
  "Returns the right my/evil-<state>-face for the current
  evil state"
  (let* ((face (intern (format "my/evil-%s-face" (symbol-name evil-state)))))
    (if (facep face) face nil)))
   #+end_src

   When loading a theme, save it's cursor face to the variable
   ~my/emacs-cursor-face~. If in evil mode, set the cursor to the appropriate evil
   face depending on the state:
   #+begin_src emacs-lisp
   (defun my/evil-look-loadtheme-after (&optional theme)
     (setq my/emacs-cursor-face (face-all-attributes 'cursor (car (frame-list))))
     (when evil-mode (evil-refresh-cursor)))

   (advice-add 'load-theme :after #'my/evil-look-loadtheme-after)
   #+end_src

   When exiting from evil mode when it's in insert state, the cursor stays a line
   This fixes that, as well as resetting the color:
   #+begin_src emacs-lisp
(add-hook 'evil-mode-hook
          (lambda () (unless evil-mode
                  (my/set-face-from-attributes 'cursor my/emacs-cursor-face))))
   #+end_src

   Switch the cursor color when changing modes:
   #+begin_src emacs-lisp
(mapc (lambda (arg)
        (let ((cursor (intern (format "evil-%s-state-cursor" (symbol-name arg))))
              (face (intern (format "my/evil-%s-face" (symbol-name arg)))))
          (set cursor (cons (face-background face)
                            (list-or-empty (symbol-value cursor))))))
      my/evil-states)

   #+end_src
** :init
*** Activate it
#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook 'evil-mode)
#+end_src
* Provide it
#+begin_src emacs-lisp
  (provide 'setup-evil-mode)
#+end_src
