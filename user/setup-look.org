#+TITLE: Setup Look
#+DESCRIPTION: The main place where the look of emacs is configured
#+AUTHOR: Maximilian Kuschewski
#+PROPERTY: my-file-type emacs-config

* Require packages
#+begin_src emacs-lisp
  (require-packages
   '(
     powerline
     page-break-lines
     ))
#+end_src

* Themes

** Utility functions
*** Theme Path
#+begin_src emacs-lisp
(defun add-subfolders-to-theme-load-path (parent-dir)
  "Add subfolders of given parent directory to theme load path"
  (dolist (f (directory-files parent-dir))
    (let ((name (concat parent-dir f)))
      (when (and (file-directory-p name)
                 (not (equal f ".."))
                 (not (equal f ".")))
        (add-to-list 'custom-theme-load-path name)))))
#+end_src

*** Theme setup
#+begin_src emacs-lisp
(defun update-fringe-background (&optional theme)
  (set-face-background 'fringe
                       (face-attribute 'default :background)))

(defun disable-all-themes ()
  "Disables all active themes."
  (interactive)
  (dolist (i custom-enabled-themes)
    (disable-theme i)))

(defun load-theme-exclusively (theme)
  "Disables all active themes, then loads
  given theme."
  (interactive
   (list
    (intern (completing-read "Load custom theme: "
                             (mapcar 'symbol-name
                                     (custom-available-themes))))))
  (disable-all-themes)
  (load-theme theme))
#+end_src

** Setup theme-path
Add the themes folder and its subfolders to the load path
#+begin_src emacs-lisp
(let ((theme-path "~/.emacs.d/themes/"))
  (add-to-list 'custom-theme-load-path theme-path)
  (add-subfolders-to-theme-load-path theme-path))
#+end_src

** Easy theme loading
Define a default light and dark theme and functions for loading them:
#+begin_src emacs-lisp
  (defconst my/default-dark-theme 'sanityinc-tomorrow-eighties)
  (defconst my/default-light-theme 'my-light)

  (defun load-theme-dark ()
    (interactive)
    (load-theme-exclusively my/default-dark-theme))

  (defun load-theme-light ()
    (interactive)
    (load-theme-exclusively my/default-light-theme))
#+end_src

* General settings
** Gui-dependent
#+begin_src emacs-lisp
  (if window-system
      (progn
        (setq frame-resize-pixelwise t)
        (setq frame-title-format '(buffer-file-name "%f" ("%b")))
        (tooltip-mode -1)
        (tool-bar-mode -1)
        (mouse-wheel-mode t)
        (blink-cursor-mode -1)
        (scroll-bar-mode 0)
        (setq-default fill-column 80)
        (setq-default indicate-empty-lines t)
        (add-hook 'after-init-hook (lambda () (load-theme-light))))
    (progn
      (menu-bar-mode -1)))
#+end_src

** Font
Increase the font size and set it to the very nice source-code-pro font, if
available.
#+begin_src emacs-lisp
(set-frame-font "Source Code Pro-16" nil t)
#+end_src

** Line numbers & fringe
#+begin_src emacs-lisp
  (custom-set-variables
   '(linum-format " %2d ")
   '(fringe-mode 4 nil (fringe)))
  ;; Make the fringe the same color as the background
  (update-fringe-background)

  ;; Update the fringe everytime the theme changes
  (advice-add 'load-theme :after #'update-fringe-background)
  (advice-add 'disable-theme :after #'update-fringe-background)
#+end_src

** Fill Column
80 Characters should be the maximum length per line
#+begin_src emacs-lisp
;; Use whitespace mode for fill column indicator
(setq
 whitespace-line-column 80
 whitespace-style       '(face lines-tail trailing tabs))
(global-whitespace-mode)
#+end_src

** Highlight cursor line
Highlight the line the cursor is currently on
#+begin_src emacs-lisp
(global-hl-line-mode)
#+end_src

** Page Break Lines
Make emacs page breaks (^L character) look like lines:
#+begin_src emacs-lisp
(global-page-break-lines-mode)
#+end_src
** Initial Frame size and position:
#+begin_src emacs-lisp
(setq initial-frame-alist
      '((top . 0) (left . 0) (width . 92) (height . 40)))
#+end_src

** Error Bell
Make the modeline flash instead of having a loud noise, or having a square
appear in the middle of the screen:
#+begin_src emacs-lisp
(defun bell-modeline-flash ()
  "A friendlier visual bell effect."
  (invert-face 'mode-line)
  (run-with-timer 0.1 nil 'invert-face 'mode-line))

(setq visible-bell nil
      ring-bell-function 'bell-modeline-flash)
#+end_src

** Powerline

*** Definitions
#+begin_src emacs-lisp
(defpowerline evil-mode-bar
  (if (and (boundp 'evil-mode) evil-mode)
      ;; evil-mode is active
      (format " %s " (upcase (symbol-name evil-state)))
    ;; evil-mode is not active
    " "))

(defpowerline god-mode-bar
  (if (and (boundp 'god-local-mode)
           (not evil-mode)
           god-local-mode)
      (format " GOD ")
    " "))
#+end_src

*** Set up the powerline theme
Create a function for setting it up:
#+begin_src emacs-lisp
(defun setup-powerline-theme ()
  "Setup the default mode-line."
  (interactive)
  (setq-default mode-line-format
                '("%e"
                  (:eval
                   (let* ((active (powerline-selected-window-active))
                          (mode-line (if active 'mode-line 'mode-line-inactive))
                          (face1 (if active 'powerline-active1 'powerline-inactive1))
                          (face2 (if active 'powerline-active2 'powerline-inactive2))
                          (face-evil (my/cur-evil-face))
                          (face-nil nil)
                          (separator-left (intern (format "powerline-%s-%s"
                                                          powerline-default-separator
                                                          (car powerline-default-separator-dir))))
                          (separator-right (intern (format "powerline-%s-%s"
                                                           powerline-default-separator
                                                           (cdr powerline-default-separator-dir))))

                          (lhs (list (powerline-raw "%*" face-nil 'l)
                                     (powerline-raw mode-line-mule-info face-nil 'l)
                                     (powerline-buffer-id face-nil 'l)
                                     (powerline-raw " " face-nil 'l)
                                     (funcall separator-right face-nil face-evil)
                                     (evil-mode-bar face-evil nil)
                                     (funcall separator-left face-evil face-nil)
                                     (god-mode-bar face-nil nil)
                                     (when (and (boundp 'which-func-mode) which-func-mode)
                                       (powerline-raw which-func-format face-nil 'l))
                                     (powerline-raw " ")
                                     ;; (funcall separator-left mode-line face1)
                                     (when (boundp 'erc-modified-channels-object)
                                       (powerline-raw erc-modified-channels-object face1 'l))
                                     (powerline-major-mode face-nil 'l)
                                     (powerline-raw " " face-nil)
                                     ;; (funcall separator-left face1 face2)
                                     ;; (powerline-minor-modes face-nil 'l)
                                     (powerline-process face-nil)
                                     (powerline-narrow face-nil 'l)
                                     (powerline-raw " " face-nil)
                                     ;; (funcall separator-left face1 face2)
                                     (powerline-vc face-nil 'r)
                                     ))
                          (rhs (list ;;(funcall separator-right face2 face1)
                                (powerline-raw "%3l:%2c " face-nil 'l)
                                ;; (funcall separator-right face1 mode-line)
                                (powerline-raw " ")
                                (powerline-raw "%7p" face-nil 'r)
                                (powerline-hud face2 face1)
                                ))
                          (center '()))
                     (concat (powerline-render lhs)
                             (powerline-fill mode-line (powerline-width rhs))
                             (powerline-render rhs)))))))


#+end_src

Actually do so:
#+begin_src emacs-lisp
(setup-powerline-theme)
#+end_src
** Misc
There was a very annoying error where 'paren-face' was undefined...
#+begin_src emacs-lisp
(unless (facep 'paren-face)
  (defface paren-face '()
    "Stop that annoying paren-face error"
    :group 'basic-faces))
#+end_src
* Provide it
#+begin_src emacs-lisp
(provide 'setup-look)
#+end_src
