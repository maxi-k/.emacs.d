#+TITLE: Setup lisp
#+DESCRIPTION:
#+AUTHOR: Maximilian Kuschewski
#+PROPERTY: my-file-type emacs-config

* Functions
** Pretty Lambdas
#+begin_src emacs-lisp
(defun pretty-lambdas ()
  (font-lock-add-keywords
   nil `(("(?\\(lambda\\>\\)"
          (0 (progn (compose-region (match-beginning 1) (match-end 1)
                                    ,(make-char 'greek-iso8859-7 107))
                    nil))))))
#+end_src

** Paredit
#+begin_src emacs-lisp
  (defun turn-on-paredit ()
    (paredit-mode t))
#+end_src
** Delete `.elc` on save
#+begin_src emacs-lisp
  (defun remove-elc-on-save ()
    "If you're saving an elisp file, likely the .elc is no longer valid."
    (make-local-variable 'after-save-hook)
    (add-hook 'after-save-hook
              (lambda ()
                (if (file-exists-p (concat buffer-file-name "c"))
                    (delete-file (concat buffer-file-name "c"))))))

#+end_src

* Require Packages
#+begin_src emacs-lisp
    (require-packages '(paredit
                        cider
                        clj-refactor
                        clojure-mode
                        clojure-snippets
                        racket-mode))
#+end_src
* Add hooks
#+begin_src emacs-lisp
  (progn
    (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
    (add-hook 'emacs-lisp-mode-hook 'remove-elc-on-save)
    (add-hook 'emacs-lisp-mode-hook (lambda () (run-hooks 'prog-mode-hook)))
    (add-hook 'emacs-lisp-mode-hook 'elisp-slime-nav-mode)
    (add-hook 'emacs-lisp-mode-hook 'pretty-lambdas)

    ;; Enable paredit mode for all the lisps
    (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
    (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
    (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
    (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
    (add-hook 'clojure-mode-hook          #'enable-paredit-mode)
  ;; Init helm-dash
  (add-hook 'clojure-mode-hook (lambda () (setq-local helm-dash-docsets '("clojure"))))

  )

#+end_src
* Keys
** Global
#+begin_src emacs-lisp
;; Should be able to eval-and-replace anywhere.
(global-set-key (kbd "C-c e") 'eval-and-replace)
;; Eval and insert after s-exp
(global-set-key (kbd "C-c i") 'eval-and-insert)
;; Eval and insert after s-exp as comment
(global-set-key (kbd "C-x c") 'eval-and-insert-as-comment)
#+end_src
** Lisp-local
Evaluate the whole buffer:
#+begin_src emacs-lisp
(define-key emacs-lisp-mode-map (kbd "C-c v") 'eval-buffer)

#+end_src

Tab and Enter:
#+begin_src emacs-lisp
  (define-key read-expression-map (kbd "TAB") 'lisp-complete-symbol)
  (define-key lisp-mode-shared-map (kbd "RET") 'reindent-then-newline-and-indent)
#+end_src
* Extensions
** Paredit
#+begin_src emacs-lisp
  (eval-after-load 'paredit
    ;; need a binding that works in the terminal
    '(define-key paredit-mode-map (kbd "M-)") 'paredit-forward-slurp-sexp))

  (dolist (mode '(scheme emacs-lisp lisp clojure))
    (when (> (display-color-cells) 8)
      (font-lock-add-keywords (intern (concat (symbol-name mode) "-mode"))
                              '(("(\\|)" . 'paren-face))))
    (add-hook (intern (concat (symbol-name mode) "-mode-hook"))
              (turn-on-paredit))
    (add-hook (intern (concat (symbol-name mode) "-mode-hook"))
              (turn-on-paredit)))

#+end_src
* Clojure
#+begin_src emacs-lisp
;; clojure
(add-to-list 'auto-mode-alist '("\\.edn$" . clojure-mode))

;; cider
(add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
(setq cider-lein-command "/usr/local/bin/lein")
(setq cider-repl-pop-to-buffer-on-connect t)
(setq cider-popup-stacktraces t)
(setq cider-repl-popup-stacktraces t)
(setq cider-auto-select-error-buffer t)
(setq cider-repl-history-file "~/.emacs.d/cider-history")
(setq cider-repl-wrap-history t)

(add-hook 'cider-repl-mode-hook 'subword-mode)
(add-hook 'cider-repl-mode-hook 'paredit-mode)
(add-hook 'cider-repl-mode-hook 'rainbow-delimiters-mode)


(defun pretty-fn ()
  (font-lock-add-keywords nil `(("(\\(fn\\>\\)"
                                 (0 (progn (compose-region (match-beginning 1)
                                                           (match-end 1)
                                                           "\u0192") nil))))))

(add-hook 'clojure-mode-hook (lambda ()
                               (clj-refactor-mode 1)
                               (cljr-add-keybindings-with-prefix "s-r")
                               'pretty-fn))

#+end_src
* Provide it
#+begin_src emacs-lisp
  (provide 'setup-lisp)
#+end_src
