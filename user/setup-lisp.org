#+TITLE: Setup lisp
#+AUTHOR: Maximilian Kuschewski
#+DESCRIPTION:
#+PROPERTY: my-file-type emacs-config-package


* General Functions
** Pretty Lambdas
#+begin_src emacs-lisp
(defun pretty-lambdas ()
  (font-lock-add-keywords
   nil `(("(?\\(lambda\\>\\)"
          (0 (progn (compose-region (match-beginning 1) (match-end 1)
                                    ,(make-char 'greek-iso8859-7 107))
                    nil))))))
#+end_src

** Delete `.elc` on save
#+begin_src emacs-lisp
  (defun remove-elc-on-save ()
    "If you're saving an elisp file, likely the .elc is no longer valid."
    (make-local-variable 'after-save-hook)
    (add-hook 'after-save-hook
              (lambda ()
                (if (file-exists-p (concat buffer-file-name "c"))
                    (delete-file (concat buffer-file-name "c"))))))

#+end_src

* :use-package paredit
** :defer t
** :config
Add a forward slurping keybinding
#+begin_src emacs-lisp
(bind-key "M-)" 'paredit-forward-slurp-sexp paredit-mode-map)
#+end_src
** :init
Load it on all the lisps:
#+begin_src emacs-lisp
(add-hook 'lisp-mode-hook #'enable-paredit-mode)
#+end_src
And when evaluating expressions (minibuffer)
#+begin_src emacs-lisp
(add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
#+end_src
And for some other lisps
#+begin_src emacs-lisp
(add-hook 'ielm-mode-hook             #'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
(add-hook 'scheme-mode-hook           #'enable-paredit-mode)
#+end_src

* :use-package clojure-mode
** :defer t
** :init
Enable paredit and helm-dash-docsets for clojure
#+begin_src emacs-lisp
(add-hook 'clojure-mode-hook #'enable-paredit-mode)
(add-hook 'clojure-mode-hook
          (lambda () (setq-local helm-dash-docsets '("clojure"))))
#+end_src

Enable clojure in edn files as well
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.edn$" . clojure-mode))
#+end_src
** :config
*** Looks
Set up a font-lock to make 'fn' into 'Æ’'
#+begin_src emacs-lisp
(defun pretty-fn ()
  (font-lock-add-keywords
   nil
   `(("(\\(fn\\>\\)"
      (0 (progn (compose-region (match-beginning 1)
                                (match-end 1)
                                "\u0192") nil))))))

(add-hook 'clojure-mode-hook 'pretty-fn)

#+end_src
*** Plugins
**** :use-package cider
***** :defer t
***** :config
Improve cider
#+begin_src emacs-lisp
(setq cider-lein-command "/usr/local/bin/lein")
(setq cider-repl-pop-to-buffer-on-connect t)
(setq cider-popup-stacktraces t)
(setq cider-repl-popup-stacktraces t)
(setq cider-auto-select-error-buffer t)
(setq cider-repl-history-file "~/.emacs.d/cider-history")
(setq cider-repl-wrap-history t)

(add-hook 'cider-mode-hook 'cider-eldoc)
(add-hook 'cider-repl-mode-hook 'subword-mode)
(add-hook 'cider-repl-mode-hook 'enable-paredit-mode)
(add-hook 'cider-repl-mode-hook 'rainbow-delimiters-mode)
#+end_src
**** :use-package clj-refactor
***** :defer t
***** :init
#+begin_src emacs-lisp
(add-hook 'clojure-mode-hook (lambda ()
                               (clj-refactor-mode 1)
                               (cljr-add-keybindings-with-prefix "s-r")))

#+end_src
**** :use-package clojure-snippets
***** :defer t

**** :use-package cljsbuild-mode
***** :defer t

* :use-package slime
** :defer t
** :config
*** :use-package elisp-slime-nav
* :use-package racket-mode
** :defer t
* use-package pixie-mode
Not for now, it gives an error that the docstring is missing...
** defer t
* :use-package parinfer
** :ensure t
** :bind
#+begin_src emacs-lisp
(("C-," . parinfer-toggle-mode))
#+end_src
** :init
#+begin_src emacs-lisp
(progn
  (setq parinfer-extensions
        '(defaults       ; should be included.
           pretty-parens  ; different paren styles for different modes.
           evil           ; If you use Evil.
           paredit        ; Introduce some paredit commands.
           smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
           smart-yank))   ; Yank behavior depend on mode.
  (add-hook 'clojure-mode-hook #'parinfer-mode)
  (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
  (add-hook 'common-lisp-mode-hook #'parinfer-mode)
  (add-hook 'scheme-mode-hook #'parinfer-mode)
  (add-hook 'lisp-mode-hook #'parinfer-mode))
#+end_src
** :config
#+begin_src emacs-lisp
(config/local-keys 'ledger-mode
  "," 'parinfer-toggle-mode)
#+end_src
* Emacs Lisp
** Keys
Add a key to evaluate the buffer
#+begin_src emacs-lisp
(define-key emacs-lisp-mode-map (kbd "C-c v") 'eval-buffer)
#+end_src

Add mode-local leader-keys
#+begin_src emacs-lisp
(config/local-keys '(emacs-lisp-mode lisp-interaction-mode)
  "c" 'byte-compile-file
  "v" 'eval-buffer)
#+end_src

** Hooks
Add some hooks for a nicer experience
#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
(add-hook 'emacs-lisp-mode-hook 'remove-elc-on-save)
(add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)
(add-hook 'emacs-lisp-mode-hook (lambda ()
                                  (run-hooks 'prog-mode-hook)
                                  ;; (run-hooks 'lisp-mode-hook)
                                  ))
;; (add-hook 'emacs-lisp-mode-hook 'elisp-slime-nav-mode)
(add-hook 'emacs-lisp-mode-hook 'pretty-lambdas)
#+end_src

* Keys
** Global Keys
#+begin_src emacs-lisp
;; Should be able to eval-and-replace anywhere.
(global-set-key (kbd "C-c e") 'eval-and-replace)
;; Eval and insert after s-exp
(global-set-key (kbd "C-c i") 'eval-and-insert)
;; Eval and insert after s-exp as comment
(global-set-key (kbd "C-x c") 'eval-and-insert-as-comment)
;; Normal evaluation
(global-set-key (kbd "C-x C-e") 'eval-last-sexp)
#+end_src
** Lisp-local Keys
Improve Tab and Enter:
#+begin_src emacs-lisp
(define-key read-expression-map (kbd "TAB") 'lisp-complete-symbol)
(define-key lisp-mode-shared-map (kbd "RET") 'reindent-then-newline-and-indent)
#+end_src
* Extensions :noexport:
** Paredit
#+begin_src emacs-lisp
  ;; (dolist (mode '(scheme emacs-lisp lisp clojure))
  ;;   (when (> (display-color-cells) 8)
  ;;     (font-lock-add-keywords (intern (concat (symbol-name mode) "-mode"))
  ;;                             '(("(\\|)" . 'paren-face))))
  ;;   (add-hook (intern (concat (symbol-name mode) "-mode-hook"))
  ;;             'enable-paredit-mode)
  ;;   (add-hook (intern (concat (symbol-name mode) "-mode-hook"))
  ;;             'enable-paredit-mode))
#+end_src
* Provide it
#+begin_src emacs-lisp
  (provide 'setup-lisp)
#+end_src
