#+TITLE: Setup web
#+DESCRIPTION: Setup web-development specific things
#+AUTHOR: Maximilian Kuschewski
#+PROPERTY: my-file-type emacs-config-package

* :use-package simple-httpd
** :defer t
* :use-package restclient
** :defer t
** :mode
#+begin_src emacs-lisp
("\\.restclient\\'" . restclient-mode)
#+end_src
* :use-package skewer-mode
Skewer: Interactive js-repl using browser-connection
** :defer t
** :init
#+begin_src emacs-lisp
(add-hook 'js2-mode-hook 'skewer-mode)
(add-hook 'css-mode-hook 'skewer-css-mode)
(add-hook 'html-mode-hook 'skewer-html-mode)
#+end_src

* :use-package php-mode
** :defer t
* :use-package js2-mode
** :defer t
** :init
Don't warn on semicolons (Ecmascript 6)
#+begin_src emacs-lisp
(setq js2-strict-missing-semi-warning nil)
#+end_src
*** :use-package rjsx-mode
**** :mode
#+begin_src emacs-lisp
("\\.jsx\\'" . rjsx-mode)
#+end_src
** :mode
#+begin_src emacs-lisp
("\\.js\\'" . js2-mode)
#+end_src
* :use-package elm-mode
** :defer t
** :config
#+begin_src emacs-lisp
(config/local-keys 'elm-mode
  "," 'elm-mode-format-buffer
  "t" 'elm-oracle-type-at-point
  "T" 'elm-compile-add-annotations
  "d" 'elm-oracle-doc-at-point
  "r" 'elm-repl-load
  "p" 'elm-preview-buffer
  "i" 'elm-compile-clean-imports
  )
#+end_src

* :use-package lorem-ipsum
** :defer t
* :use-package impatient-mode
** :defer t
* :use-package htmlize
** :defer t
* :use-package emmet-mode
** :defer t
** :init
Emmet: Quick <tag> generation with nice syntax
#+begin_src emacs-lisp
;; Autostart emmet mode on any markup modes
(add-hook 'sgml-mode-hook 'emmet-mode)
;; Enable emmet for css abbreviation
(add-hook 'css-mode-hook 'emmet-mode)
;; Enable emmet for web mode
(add-hook 'web-mode-hook 'emmet-mode)
;; Enable emment for xml
(add-hook 'nxml-mode-hook 'emmet-mode)
#+end_src

* :use-package twig-mode
** :defer t
* :use-package web-mode
** :defer t
** :mode
#+begin_src emacs-lisp
("\\.html?\\'" . web-mode)
("\\.erb?\\'" . web-mode)
("\\.ts?\\'" . web-mode)
("\\.tsx?\\'" . web-mode)
#+end_src
** :config
#+begin_src emacs-lisp
(setq web-mode-markup-indent-offset 2)
(setq web-mode-code-indent-offset 2)
#+end_src
* :use-package tide
** :defer t
** :init
#+begin_src emacs-lisp
(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (setq tide-format-options '(:indentSize 4 :tabSize 4))
  (flycheck-add-next-checker 'typescript-tide '(t . typescript-tslint) 'append)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (setq tab-width 4
        standard-indent 4)
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1))

  ;; formats the buffer before saving
  (add-hook 'before-save-hook 'tide-format-before-save)
  (add-hook 'web-mode-hook
            (lambda ()
              (when (or (string-equal "tsx" (file-name-extension buffer-file-name))
                        (string-equal "ts" (file-name-extension buffer-file-name)))
                (setup-tide-mode))))
(flycheck-add-mode 'typescript-tslint 'web-mode)
#+end_src
** :config
#+begin_src emacs-lisp
  ;; Detailed completions
  (setq tide-completion-detailed t)

  ;; enable typescript-tslint checker
  (flycheck-add-mode 'typescript-tslint 'web-mode)

  ;; Add some local keys
  (config/local-keys 'web-mode
    "d" 'tide-jump-to-definition
    "b" 'tide-jump-back
    "i" 'tide-jump-to-implementation
    "," 'tide-documentation-at-point)
#+end_src
* :use-package tagedit
** :defer t
* :use-package coffee-mode
** :defer t
* :use-package scss-mode
** :defer t
* :use-package less-css-mode
** :defer t
* :use-package yaml-mode
** :defer t
** :mode "\\.yml\\'"
* :use-package reason-mode
** :defer t
* :use-package swagger-to-org
* Provide it
#+begin_src emacs-lisp
(provide 'setup-web)
#+end_src
