#+TITLE: General Functions
#+AUTHOR: Maximilian Kuschewski
#+DESCRIPTION: Providing some generally useful functions
#+PROPERTY: my-file-type emacs-config


* Buffer Handling
#+begin_src emacs-lisp
(defun kill-other-buffers ()
  "Kill all buffers except the active one."
  (interactive)
  (mapc 'kill-buffer
        (delq (current-buffer)
              (remove-if-not 'buffer-file-name (buffer-list)))))

(defun org-scratch-buffer ()
  "Create a scratch buffer in org mode."
  (interactive)
  (switch-to-buffer (get-buffer-create "*scratch-org*"))
  (org-mode))

(defun new-scratch-buffer (name)
  "Create a scratch-buffer with given name (*scratch-{name}*)"
  (interactive "sName: ")
  (switch-to-buffer (get-buffer-create (concat "*scratch-" name "*")))
  (lisp-interaction-mode))
#+end_src

* Mark/Region

#+begin_src emacs-lisp
(defun jump-to-mark ()
  "Jumps to the local mark, respecting the `mark-ring' order.
  This is the same as using \\[set-mark-command] with the prefix argument."
  (interactive)
  (set-mark-command 1))

(defun kill-region-or-backward-word ()
  (interactive)
  (if (region-active-p)
      (kill-region (region-beginning) (region-end))
    (backward-kill-word 1)))

(defun save-region-or-current-line (arg)
  (interactive "P")
  (if (region-active-p)
      (kill-ring-save (region-beginning) (region-end))
    (copy-line arg)))
#+end_src

* Buffer Cleanup
#+begin_src emacs-lisp
(defun untabify-buffer ()
  (interactive)
  (untabify (point-min) (point-max)))

(defun indent-buffer ()
  (interactive)
  (indent-region (point-min) (point-max)))

(defun cleanup-buffer ()
  "Perform a bunch of operations on the whitespace content of a buffer."
  (interactive)
  (indent-buffer)
  (untabify-buffer)
  (delete-trailing-whitespace))
#+end_src

* Eval / Interactive Programming
#+begin_src emacs-lisp
(defun eval-and-replace ()
  "Replace the preceding sexp with its value."
  (interactive)
  (backward-kill-sexp)
  (condition-case nil
      (prin1 (eval (read (current-kill 0)))
             (current-buffer))
    (error (message "Invalid expression")
           (insert (current-kill 0)))))

(defun eval-and-insert ()
  (interactive)
  (let ((value (eval (preceding-sexp))))
    (insert (format "%S" value))))

(defun eval-and-insert-as-comment ()
  (interactive)
  (let ((value (eval (preceding-sexp))))
    (insert (format " ;; %S" value))))
#+end_src

* 3rd Party Programs Integration
#+begin_src emacs-lisp
(defun open-in-browser ()
  "Open the buffer file in the standard browser."
  (interactive)
  (browse-url
   (concat "file://" (buffer-file-name))))

#+end_src

* Emacs Server
#+begin_src emacs-lisp
(defun server-shutdown ()
  "Save buffers, Quit, and Shutdown (kill) server"
  (interactive)
  (save-some-buffers)
  (kill-emacs)
  )
#+end_src
* General Utility
#+begin_src emacs-lisp
(defun org-create-link-in-org-dir ()
  "Creates a symbolic link of the currently
    visited file in the org-directory "
  (interactive)
  (shell-command (concat "ln -s " buffer-file-name " "
                         org-directory "/"
                         (file-name-nondirectory buffer-file-name)
                         " & disown")))

(defun rename-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME."
  (interactive "sNew name: ")
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not filename)
        (message "Buffer '%s' is not visiting a file!" name)
      (if (get-buffer new-name)
          (message "A buffer named '%s' already exists!" new-name)
        (progn
          (rename-file name new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil))))))

(defun time ()
  "Messages the current time in the format hh:mm."
  (interactive)
  (message (substring (current-time-string) 11 16)))

(defun my/set-face-from-attributes (face attrs)
  "Sets all the face attributes of given
    face from given attribute-value list"
  (mapc (lambda (attr)
          (set-face-attribute face nil (car attr) (cdr attr)))
        attrs))

(defun my/call-times (fn times arg)
  (let ((result arg))
    (dotimes (n times result)
      (setq result (funcall fn result)))))

(defun list-or-empty (item)
  "If item is nil, returns the empty list,
otherwise a list of the item."
  (if item (list item) '()))

(defun my/insert-alphabet (separator)
  (interactive "sSeparator: ")
  (message separator)
  (let ((alphabet "abcdefghijklmnopqrstuvwxyz"))
    (mapc (lambda (c) (insert c) (insert separator))
          (mapcar 'char-to-string (append alphabet nil)))))

(defun toggle-window-split ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
             (next-win-buffer (window-buffer (next-window)))
             (this-win-edges (window-edges (selected-window)))
             (next-win-edges (window-edges (next-window)))
             (this-win-2nd (not (and (<= (car this-win-edges)
                                         (car next-win-edges))
                                     (<= (cadr this-win-edges)
                                         (cadr next-win-edges)))))
             (splitter
              (if (= (car this-win-edges)
                     (car (window-edges (next-window))))
                  'split-window-horizontally
                'split-window-vertically)))
        (delete-other-windows)
        (let ((first-win (selected-window)))
          (funcall splitter)
          (if this-win-2nd (other-window 1))
          (set-window-buffer (selected-window) this-win-buffer)
          (set-window-buffer (next-window) next-win-buffer)
          (select-window first-win)
          (if this-win-2nd (other-window 1))))))

(defun my/curl (url)
  (interactive "sURL: ")
  (url-retrieve url
                (lambda (status) (switch-to-buffer (current-buffer)))))

(defun open-folder-in-finder ()
  (interactive)
  (shell-command "open ."))

#+end_src
* Provide...
  #+begin_src emacs-lisp
  (provide 'general-functions)
  #+end_src
