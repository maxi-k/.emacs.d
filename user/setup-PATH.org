#+TITLE: Setup Path
#+DESCRIPTION: Configuration related to the PATH/exec-path
#+AUTHOR: Maximilian Kuschewski
#+PROPERTY: my-file-type emacs-config

* Utility Functions
#+begin_src emacs-lisp
(defun add-to-PATH (s)
  "Adds given String (without :) to the PATH"
  (setenv "PATH" (concat (getenv "PATH") (concat path-separator s))))

(defun add-PATH-to-exec-path ()
  "Sets the exec-path to the same value as PATH"
  (setq exec-path (append exec-path
                          (split-string (getenv "PATH") path-separator))))

(defun set-exec-path-from-shell-PATH ()
  "Sets the exec-path to the same value used by the user shell"
  (let ((path-from-shell
         (replace-regexp-in-string
          "[[:space:]\n]*$" ""
          (shell-command-to-string "$SHELL -l -c 'echo $PATH'"))))
    (setenv "PATH" path-from-shell)
    (setq exec-path (split-string path-from-shell path-separator))))
#+end_src

* Set up the PATH
Append missing items to the PATH. Only ever change the PATH, as the PATH will be
added to the exec path after init is done
#+begin_src emacs-lisp
(mapc 'add-to-PATH
      '("/Users/Maxi/Applications/scripts:"
        "/Users/Maxi/.cabal/bin:"
        "/Applications/ghc-7.8.3.app/Contents/bin:"
        "/usr/local/bin:"))
#+end_src


* Set up exec-path
The plan here is to set the PATH throughout the configuration, and then add it
to the exec path after init is done
#+begin_src emacs-lisp
  (add-hook 'after-init-hook
            (lambda ()
              (delete-dups (add-PATH-to-exec-path))))
#+end_src
* Provide it
#+begin_src emacs-lisp
(provide 'setup-PATH)
#+end_src
