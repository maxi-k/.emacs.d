#+TITLE: Setup Org Mode
#+DESCRIPTION: Setup Org in Org - Homoiconicity for the win!
#+AUTHOR: Maximilian Kuschewski
#+PROPERTY: my-file-type emacs-config-package

* :use-package org
** :defer 3
** :pin manual
** :ensure nil
** :bind
#+begin_src emacs-lisp
("C-c l" . org-store-link)
("C-c t" . org-capture)
("C-c a" . org-agenda)
("C-c b" . org-iswitchb)
#+end_src
** :config
*** General Settings
#+begin_src emacs-lisp
(setq org-directory "~/Documents/Org/"
      org-export-default-language "de"
      ;; Remove the annoying link in org mode exported html
      ;; org 8.0 (setq org-html-validation-link nil)
      org-html-validation-link nil
      ;; Allow for local bindings in org documents
      ;; e.g #+BIND: org-html-validation-link t
      org-export-allow-bind-keywords t
      org-startup-indented t
      org-footnote-auto-adjust t
      ;; fontify code in code blocks
      org-src-fontify-natively t
      ;; Add a :CLOSED tag with timestamp
      ;; to todo items when they are done
      org-log-done 'time)

(setq org-agenda-include-diary t)
;; Let the default appointment duration be 1hr if no end is set
(setq org-agenda-default-appointment-duration 60)
(setq diary-file (concat org-directory "diary/diary"))
(setq org-default-notes-file (concat org-directory "capture/notes.org"))

;; The [/] cookie should look for entries in subtrees also
(setq org-hierarchical-todo-statistics nil)
#+end_src
*** Latex
#+begin_src emacs-lisp
;; (require 'ox-latex)
(setenv "PDFLATEX" "pdflatex -shell-escape")
(setq org-latex-pdf-process '("texi2dvi --pdf %f"))
;; Enable LaTeX (pdf) syntax highlighting
(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-listings 'minted)
#+end_src
The texbin and mathml paths are set up in [[./local/setup-local.org]]

*** Source Blocks
Load more languages for org-babel
#+begin_src emacs-lisp
(add-hook
 'org-mode-hook
 (lambda ()
   (org-babel-do-load-languages
    'org-babel-load-languages
    '((sh         . t)
      (js         . t)
      (emacs-lisp . t)
      (perl       . t)
      (scala      . t)
      (clojure    . t)
      (python     . t)
      (ruby       . t)
      (dot        . t)
      (css        . t)
      (plantuml   . t)))))
#+end_src

Don't ask before evaluating code snippets
#+begin_src emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+end_src

Make tab in source blocks behave like it would in the language
#+begin_src emacs-lisp
(setq org-src-tab-acts-natively t)
#+end_src

Preserve the indentation level of code blocks.
Important for makefiles, where tab indentation is required
#+begin_src emacs-lisp
(setq org-src-preserve-indentation t)
#+end_src

*** Html
Define an auto-export-mode, that automatically exports the buffer to html on
save.
#+begin_src emacs-lisp
(define-minor-mode org-html-auto-export-mode
  "A minor mode for automatically exporting the org file
  you are working on to html whenever you save the file."
  :lighter "org-html-auto-export"
  :keymap (let ((map (make-sparse-keymap)))
            (define-key map (kbd "s-s") (lambda () (interactive)
                                          (save-buffer)
                                          (org-html-export-to-html t)))
            map))
#+end_src
*** Org-Reveal
Make a interactive function for activating org-reveal
#+begin_src emacs-lisp
(defun activate-org-reveal ()
  (interactive)
  (load-library "ox-reveal"))
#+end_src

Define an auto-export-mode for org-reveal, so saving the file also exports it
again
#+begin_src emacs-lisp
(define-minor-mode org-reveal-auto-export-mode
  "A minor mode for automatically exporting the org file
  you are working on to html whenever you save the file.
  This is only for using the org-reveal presentation tool."
  :lighter "org-reveal-auto-export"
  :keymap (let ((map (make-sparse-keymap)))
            (define-key map (kbd "s-s") (lambda () (interactive)
                                          (save-buffer)
                                          (org-reveal-export-to-html)))
            map))
#+end_src

*** Local Keys
Standard emacsy org mode bindings:
#+begin_src emacs-lisp
;; Define some local keybindings
(let ((bindings `((,(kbd "M-h") . kill-region-or-backward-word)
                  (,(kbd "M-n") . outline-next-visible-heading)
                  (,(kbd "M-p") . outline-previous-visible-heading)
                  (,(kbd "H-i") . org-table-insert-row)
                  (,(kbd "H-k") . org-table-kill-row)
                  (,(kbd "C-M-y") . org-table-paste-rectangle)
                  (,(kbd "C-M-l") . org-table-sort-lines)
                  (,(kbd "M-I") . org-toggle-iimage-in-org)
                  (,(kbd "C-y") . yank)
                  (,(kbd "s-t") . org-todo)
                  (,(kbd "M-]") . org-toggle-timestamp-type))))
  (mapc (lambda (arg)
          (define-key org-mode-map (car arg) (cdr arg)))
        bindings))
#+end_src

Evil-leader bindings:
#+begin_src emacs-lisp
(config/local-keys 'org-mode
  "a" 'org-agenda-file-to-front
  "A" 'org-remove-file
  "t" (config/hydra hydra/org/todo (:pre (org-todo) :color red)
        ("t" org-todo "Toggle Todo"))
  "p" 'org-priority
  "d" 'org-toggle-timestamp-type
  "c" 'org-ctrl-c-ctrl-c
  "e" 'org-export-dispatch
  "x" (lambda () "c-u-ctrl-c-c" (interactive)
        (org-call-with-arg 'org-ctrl-c-ctrl-c '(4))))
#+end_src

Key bindings for org-agenda mode
#+begin_src emacs-lisp
(add-hook 'org-agenda-mode-hook
          (lambda ()
            (local-set-key (kbd "C-c m") 'org-agenda-month-view)))
#+end_src

*** Global Keys
The standard global keys are defined in [[:bind]]. These use the bootstrap leader:
#+begin_src emacs-lisp
(config/provide-feature :app
  "o" '("Org Mode"
        "l"  org-store-link
        "c"  org-capture
        "a"  org-agenda
        "b"  org-iswitchb))
#+end_src

*** MobileOrg
Set up some stuff for syncing org mode with the phone
#+begin_src emacs-lisp
(setq org-mobile-directory "~/Documents/Cloud/Org/"
      org-mobile-inbox-for-pull "~/Documents/Org/mobile")
#+end_src
*** Plugins
**** :use-package org-alert
Org alert can do scheduled notifications based on the org-agenda. Run it on a
timer to check the agenda and remind me of stuff:
#+begin_src emacs-lisp
;; Commented out because it requires the
;; agenda buffer to be open, which I don't want
;; to do after init by default
;; (add-hook 'after-init-hook
;;           (lambda ()
;;             (org-agenda-list)
;;             (org-alert-enable)))
#+end_src
***** :defer t

**** :use-package org-bullets
***** :defer t
**** :use-package ox-gfm
***** :defer t
**** :use-package ox-mediawiki
***** :defer t
**** :use-package ox-reveal
***** :defer t
**** :use-package ox-twbs
***** :defer t
**** Org-Confluence
Org-Confluence allows you to export a file to confluence markup. It was not
available on elpa last time I checked.
#+begin_src emacs-lisp
(autoload 'org-confluence-export-as-confluence "ox-confluence.el"
  "Export an Org buffer as confluence markup" t)
#+end_src

#+begin_src emacs-lisp
;; Change per-file with #+BIND: org-confluence-src-block-theme "Emacs"
(setq org-confluence-src-block-theme "Default")
#+end_src
*** Looks
**** Org Bullets
   #+begin_src emacs-lisp
;; Make the bullets look nicer
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
   #+end_src

**** Org Beautify Theme
Setup bigger fonts instead of lots of colors for headings and more:
#+begin_src emacs-lisp
(defun do-beautify-org (&optional theme)
  (unless (featurep 'org-beautify-theme)
    (package-install 'org-beautify-theme))
  (ignore-errors (require 'org-beautify-theme))
  ;; Toggle bullets-mode twice so it recognizes the theme.
  ;; This is quite weird, but it works
  (org-bullets-mode)
  (org-bullets-mode))

(advice-add 'load-theme :after #'do-beautify-org)
#+end_src
* Functions
#+begin_src emacs-lisp
(defun markdown-file-to-org ()
  (interactive)
  (let* ((md-file-name (file-truename buffer-file-name))
         (file-base-name (file-name-sans-extension (file-truename buffer-file-name)))
         (command (concat "pandoc -f markdown -t org -o "
                          file-base-name ".org "
                          md-file-name)))
    (shell-command command)))

#+end_src
* Provide it
  #+begin_src emacs-lisp
(provide 'setup-org)
  #+end_src
